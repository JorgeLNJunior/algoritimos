#if !defined(HASH_TABLE_H)
#define HASH_TABLE_H

#include <stdlib.h>
#include <stdbool.h>
#include <string.h>

extern char *dummy_key;
extern unsigned int const DEFAULT_TABLE_CAPACITY;

typedef struct HashTableItem {
  char *key;
  char *value;
} HashTableItem;

typedef struct HashTable {
  HashTableItem **data;
  size_t capacity;
  size_t size;
} HashTable;

// creates a hash table with given capacity.
HashTable *hash_table_create(const size_t capacity);

// removes a hash table and its data from memory.
void hash_table_free(HashTable *table);

// returns a hash generated by the FNV-1a 32 bit hash algorithm.
int hash(const char *key, size_t table_capacity);

// adds a value to a hash table.
void hash_table_add(HashTable *table, char *key, char *value);

// return if a hash table constains a given key.
bool hash_table_key_exists(const HashTable *table, const char *key);

// return the value from a given key.
char *hash_table_get(const HashTable *table, const char *key);

// removes a key and its value from a hash table.
void hash_table_remove(HashTable *table, const char *key);

#endif
